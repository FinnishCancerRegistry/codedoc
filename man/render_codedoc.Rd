% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/render.R
\name{render_codedoc}
\alias{render_codedoc}
\alias{render_codedoc_}
\title{Render Code Documentation}
\usage{
render_codedoc(
  block_df,
  template_file_path = NULL,
  writeLines_arg_list = list(),
  render_arg_list = list(),
  assertion_type = "input"
)

render_codedoc_(
  block_df,
  template_file_path = NULL,
  writeLines_arg_list = list(),
  render_arg_list = list()
)
}
\arguments{
\item{block_df}{\verb{[data.frame]} (mandatory, no default)

a data.frame which must have columns \code{key}, \code{comment_block}, and
\code{text_file_path} as in the output of \link{extract_keyed_comment_blocks}}

\item{template_file_path}{\verb{[NULL, character]} (optional, default \code{NULL})
\itemize{
\item \code{NULL}: no template is used; see section Template
\item \code{character}: path to a template file; see section Template
}}

\item{writeLines_arg_list}{\verb{[list]} (optional, default \code{list()})

list of arguments passed to \code{writeLines} when writing temporary .rmd
file to render; \code{con} and \code{text} are always determined internally}

\item{render_arg_list}{\verb{[list]} (optional, default \code{list()})
list of arguments passed to \link[rmarkdown:render]{rmarkdown::render}; \code{input} is always
determined internally; the default settings set internally in this function
are

\if{html}{\out{<div class="sourceCode">}}\preformatted{  default_render_arg_list <- list(
    output_file = "codedoc.md",
    output_format = "md_document",
    output_dir = getwd(),
    quiet = TRUE,
    envir = new.env(parent = parent.frame(1L)),
    knit_root_dir = if (is.null(template_file_path)) getwd() else
      normalizePath(dirname(template_file_path))
  )
}\if{html}{\out{</div>}}

where \code{envir} will by default be the environment where \code{render_codedoc} was
called.

\code{envir} is always populated by these objects:
\itemize{
\item \code{block_df}: the user-supplied arg
\item \code{codedoc_lines}: a function with only the argument \code{key}, which must be
one of the keys in \code{block_df}; the comment lines are returned for the
corresponding key as a character vector
\item \code{codedoc_text}: as \code{codedoc_lines}. but instead of the lines as a
character vector (with one or more elements) this function returns exactly
one string, formed by pasting the lines together with
\code{paste0(lines, collapse = "\\n")}; this is more convenient for rendering
text in the template (see section Template)
}}

\item{assertion_type}{see \verb{[dbc::report_to_assertion]}}
}
\description{
Render using \link[rmarkdown:render]{rmarkdown::render} a documentation file using extracted
code comment blocks.
}
\details{
\code{render_codedoc} is intended to be used directly by the user
and not within other functions, whereas the converse holds for
\code{render_codedoc_}. See \code{help("dbc", package = "dbc")} for a discussion
on this distinction.
}
\section{Template}{


The template file must be an Rmarkdown file (see e.g. \link[rmarkdown:render]{rmarkdown::render}).
It's contents are completely up to you. You should make use the objects
created into the rendering environment (see \code{envir} in \link[rmarkdown:render]{rmarkdown::render})
by this function; see arg \code{render_arg_list}.

Instead of using the \code{codedoc_} functions, one may simply write e.g.
\verb{@codedoc_lines my_key} in the template file, and then the corresponding
comment block identified by key \code{my_key} will be inserted there before
rendering.

See function \link{example_template_lines} for examples.
}

